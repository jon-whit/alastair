function [ file ] = FPT_finite_gen( B,M,G,q1,r1,Prange )

syms b m g q r

A1_1 = sym(0);
A1_2 = sym(1);
A2_1 = sym(0);
A2_2 = sym(-b/m);
B1_1 = sym(0);
B2_1 = sym(1/m);
Q1_1 = sym(0);
Q1_2 = sym(0);
Q2_1 = sym(0);
Q2_2 = sym(q);
R1 = sym(r);

% constant definition
C = {'b',sym(B);...
     'm',sym(M);...
     'g',sym(G);...
     'q',sym(q1);...
     'r',sym(r1);...
     'A_1_1',A1_1;...
     'A_1_2',A1_2;...
     'A_2_1',A2_1;...
     'A_2_2',A2_2;...
     'B_1_1',B1_1;...
     'B_2_1',B2_1;...
     'Q_1_1',Q1_1;...
     'Q_1_2',Q1_2;...
     'Q_2_1',Q2_1;...
     'Q_2_2',Q2_2;...
     'R_1_1',R1};
 
% variable definition
f32 = 'float32';
f64 = 'float64';


V = {f64,'P_1_1',Prange(1,:);...
     f64,'P_1_2',Prange(2,:);...
     f64,'P_2_1',Prange(3,:);...
     f64,'P_2_2',Prange(4,:)};

% Declaring definitions
A = sym('A_%d_%d',[2 2]);
B = sym('B_%d_%d',[2 1]);
Q = sym('Q_%d_%d',size(A));
R = sym('R_%d_%d',size(B,2));
P = sym('P_%d_%d',size(A));

Pnext =  Q + (A.'*P*A) - (A.'*P*B)*((R+B.'*P*B)^-1)*(B.'*P*A);
Knext = -1*((R+B.'*P*B)^-1)*(B.'*P*A);

r32 = 'rnd32';
r64 = 'rnd64';

D = {'Pnext_1_1',r32,Pnext(1,1);...
     'Pnext_1_2',r32,Pnext(1,2);...
     'Pnext_2_1',r32,Pnext(2,1);...
     'Pnext_2_2',r32,Pnext(2,2);...
     'Knext_1',r32,Knext(1);...
     'Knext_2',r32,Knext(2)};
 
% Declare Expressions

E = {'Pnext_1_1';...
     'Pnext_1_2';...
     'Pnext_2_1';...
     'Pnext_2_2';...   
     'Knext_1';...
     'Knext_2'...
     };
 
file = FPTaylor_file(C,V,D,E);

end

